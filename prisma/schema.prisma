// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  hashedPassword String?
  email         String?   @unique
  emailVerified Boolean?
  image         String?
  taskIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  members Member[]
  invitations Invitation[]
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  industry Industry
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  location String?
  logo String?
  website String
  
  members Member[]
  projects Project[]
  invitations Invitation[]
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  companyId String @db.ObjectId
  title String @unique
  priority Priority @default(Medium)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  description String?
  assignedUsers String[]

  tasks Task[]
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  companyId String @db.ObjectId

  name String
  email String
  image String?
  role Role @default(Editor)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  status Status @default(Todo)
  projectId String @db.ObjectId
  createdAt DateTime @default(now())
  assigneeId String?

  description String?
  priority Priority @default(Medium)
  dueDate DateTime?
  label Label?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Invitation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  companyId String @db.ObjectId
  message String?
  role Role

  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
}

enum Industry {
  IT_Software
  Healthcare
  Finance
  Education
  ECommerce
  Retail
  Manufacturing
  Entertainment
  RealEstate
  Travel_Hospitality
  Marketing_Advertising
  Automotive
  Agriculture
  Energy
  Construction
  Telecommunications
  Media
  Fashion_Apparel
  Sports
  Food_Beverage
  NonProfit
  Government
  Other
}

enum Priority {
  Lown
  Medium
  High
}

enum Role {
  Reader
  Editor
  Admin
}

enum Status {
  Todo
  In_progress
  Completed
}

enum Label {
  Urgent
  Important
  Bub
  Feature
  Request
  Documentation
}